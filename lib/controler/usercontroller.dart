import 'dart:convert';
import 'package:assistantstroke/services/api_service.dart';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';

class User {
  String patientName;
  String dateOfBirth; // Gi·ªØ nguy√™n l√† String v√¨ b·∫°n c·∫ßn l∆∞u c·∫£ th·ªùi gian
  bool gender;

  User({
    required this.patientName,
    required this.dateOfBirth,
    required this.gender,
  });

  factory User.fromJson(Map<String, dynamic> json) {
    return User(
      patientName: json['patientName'] ?? '',
      dateOfBirth: json['dateOfBirth'] ?? '', // Ch·∫Øc ch·∫Øn l√† d·∫°ng ISO 8601
      gender: json['gender'] ?? '',
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'patientName': patientName,
      'dateOfBirth': dateOfBirth,
      'gender': gender,
    };
  }

  // Getter cho ng√†y sinh ƒë√£ ƒë∆∞·ª£c format l·∫°i
  String? get formattedDob {
    return _formatDob(dateOfBirth); // Tr·∫£ v·ªÅ ng√†y ƒë√£ ƒë·ªãnh d·∫°ng n·∫øu h·ª£p l·ªá
  }

  // H√†m ƒë·ªãnh d·∫°ng ng√†y v·ªõi ph·∫ßn gi·ªù
  String? _formatDob(String dob) {
    try {
      DateTime parsedDate = DateTime.parse(
        dob,
      ); // ƒê·∫£m b·∫£o l√† d·∫°ng ISO 8601 v·ªõi th·ªùi gian
      return parsedDate.toIso8601String(); // Tr·∫£ v·ªÅ ƒë·∫ßy ƒë·ªß gi·ªù v√† ph√∫t
    } catch (e) {
      print('L·ªói khi parse ng√†y sinh: $e');
      return null; // Tr·∫£ v·ªÅ null n·∫øu kh√¥ng parse ƒë∆∞·ª£c
    }
  }
}

class UserController {
  Future<User> fetchUser() async {
    final String baseUrl = ApiEndpoints.profile;

    final prefs = await SharedPreferences.getInstance();
    final userId = prefs.getInt(
      'userId',
    ); // Ho·∫∑c getString n·∫øu userId l√† string
    final token = prefs.getString('token');

    final Uri url = Uri.parse('$baseUrl/$userId');

    final response = await http.get(
      url,
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer $token',
      },
    );
    if (response.statusCode == 200) {
      final data = json.decode(response.body);
      print(data);
      return User.fromJson(data);
    } else {
      throw Exception('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ng∆∞·ªùi d√πng');
    }
  }

  Future<bool> updateUser(User user) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('token'); // üëà ƒë·ªïi n·∫øu b·∫°n d√πng key kh√°c
      print(token);
      if (token == null) {
        print('Kh√¥ng t√¨m th·∫•y token!');
        return false;
      }

      final Uri url = Uri.parse(ApiEndpoints.update_basic_info);
      print(url);
      print(user.toJson());
      final response = await http.put(
        url,
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $token',
        },
        body: json.encode(user.toJson()),
      );

      if (response.statusCode == 200) {
        return true;
      } else {
        print('L·ªói c·∫≠p nh·∫≠t: ${response.statusCode} - ${response.body}');
        return false;
      }
    } catch (e) {
      print('L·ªói k·∫øt n·ªëi khi c·∫≠p nh·∫≠t: $e');
      return false;
    }
  }
}
