import 'dart:convert';

import 'package:assistantstroke/services/api_service.dart';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';

class ForgotController {
  late SharedPreferences prefs;
  final String email;

  // Constructor nh·∫≠n username v√† password
  ForgotController({required this.email});
  Future<void> init() async {
    prefs = await SharedPreferences.getInstance(); // L·∫•y SharedPreferences
  }

  Future<bool> forgot(BuildContext context) async {
    await init();
    final String url = ApiEndpoints.forgot;
    final prefs = await SharedPreferences.getInstance();
    final token = prefs.getString('token');
    try {
      print('üîÑ ƒêang g·ª≠i request v·ªõi: $email');

      final response = await http.post(
        Uri.parse(url),
        body: jsonEncode({'email': email}),
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $token',
        },
      );

      print('üîç Response Code: ${response.statusCode}');
      print('üì© Response Body: ${response.body}');

      if (response.statusCode == 200) {
        print('‚úÖ G·ª≠i th√†nh c√¥ng');
        ScaffoldMessenger.of(
          context,
        ).showSnackBar(const SnackBar(content: Text('ƒê√£ g·ª≠i OTP t·ªõi email.')));
        return true;
      } else if (response.statusCode == 401) {
        print('‚ùå Sai email!');
        ScaffoldMessenger.of(
          context,
        ).showSnackBar(const SnackBar(content: Text('Email kh√¥ng t·ªìn t·∫°i!')));
        return false;
      } else {
        print('‚ö†Ô∏è L·ªói kh√¥ng x√°c ƒë·ªãnh!');
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('L·ªói m√°y ch·ªß, th·ª≠ l·∫°i sau!')),
        );
        return false;
      }
    } catch (error) {
      print('üö® L·ªói k·∫øt n·ªëi API: $error');
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi server!')),
      );
      return false;
    }
  }
}
